%\VignetteIndexEntry{An introduction to QuasR}
%\VignetteDepends{}
%\VignetteKeywords{XXXKexword}
%\VignettePackage{QuasR}

\documentclass[10pt]{article}

\usepackage{times}
\usepackage{hyperref}

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}

\newcommand{\software}[1]{\textsf{#1}}
\newcommand{\R}{\software{R}}
\newcommand{\QuasR}{\Rpackage{QuasR}}


\title{An Introduction to \Rpackage{QuasR}}
\author{Anita Lerch}
\date{Modified: 12 December, 2011. Compiled: \today}

\begin{document}

\maketitle

<<options,echo=FALSE>>=
options(width=60)
@



\tableofcontents

\section{Introduction}

The \Rpackage{QuasR} packages quantify and annotate short reads in R. For now only single read ChIP-seq experiments are supported. In future \Rpackage{QuasR} will support single and paired-end ChIP-seq, RNA-seq and Bis-seq experiments.

<<preliminaries, eval=FALSE>>=
library(QuasR)
@

\section{Getting started}

In this section a simple single-end ChIP-seq workflow is shown. We assume in this workflow that the short reads doesn't need to be preprocessed. For short reads which contains a barcode, an adapter or which has do be filtered, please read the section \ref{sec:preprocessRead} preprocessRead().

\subsection{Create the qProject object}

\subsubsection*{Create the sample file}
The sample file is a tab delimited text file, with the two columes 'SampleName' and 'FileName' for single-end

\begin{tabular}{|ll|}
\hline
SampleName&FileName\\
Sample1&sr\_phiX174\_1\_1.fastq\\
Sample2&sr\_phiX174\_2\_1.fastq\\
Sample2&sr\_phiX174\_2\_2.fastq\\
\hline
\end{tabular}\\
and three columes 'SampleName', 'FileName1' 'FileName2' for a paired-end experiment.

\begin{tabular}{|lll|}
\hline
SampleName&FileName1&FileName2\\
Sample1&sr\_phiX174\_1\_1.fastq&sr\_phiX174\_1\_2.fastq\\
Sample2&sr\_phiX174\_2\_1.fastq&sr\_phiX174\_2\_2.fastq\\
\hline
\end{tabular}

Example files could be found in the \Rpackage{QuasR} packages.

<<sampleFile, eval=FALSE>>=
sampleFile <- system.file(package="QuasR", 
                          "extdata", "samples_phiX_single.txt")
sampleFile <- system.file(package="QuasR", 
                          "extdata", "samples_phiX_paired.txt")
@

\subsubsection*{Create the annotation file}
<<annotationFile, eval=FALSE>>=
annotationFile <- system.file(package="QuasR", "extdata", "annotations.txt")
@

\subsubsection*{Set genome}
<<genome, eval=FALSE>>=
available.genomes()
genomeName <- "BSgenome.Dmelanogaster.UCSC.dm3"
@

\subsubsection*{Set genome}
<<qProject, eval=FALSE>>=
project <- qProject(sampleFile, genome=genomeName, annotationFile=annotationFile)
@

\subsection{Performe the alignment with the qAlign() function}
<<qAlign, eval=FALSE>>=
project <- qAlign(project)
@

\subsection{Extract sum of the alignment weights with the qCount() function}
GRange
<<qCount, eval=FALSE>>=
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
txdb <- TxDb.Dmelanogaster.UCSC.dm3.ensGene
isActiveSeq(txdb)[seqlevels(txdb)] <- FALSE
isActiveSeq(txdb)["chr2L"] <- TRUE
gr <- transcripts(txdb)
cnt <- qCount(project, gr, collapseSamples=T, overlap="within")
@

\subsection{Saving and restoring the qProject object}
<<saveRestore, eval=FALSE>>=
projectFilename <- qSaveProject(project)
project <- qReadProject(projectFilename)
@

\section{Example workflow with a \Rpackage{BSgenome} as genome}
<<BSgenomeProject, eval=FALSE>>=
td <- tempdir()
sampleFile <- system.file(package="QuasR", "extdata", "samples.txt")
annotationFile <- system.file(package="QuasR", "extdata", "annotations.txt")
available.genomes()
genomeName <- "BSgenome.Dmelanogaster.UCSC.dm3"
project <- qProject(sampleFile, genome=genomeName, annotationFile=annotationFile, path=td, aligner="Rbowtie")
project <- qAlign(project)
projectFilename <- qSaveProject(project)
project <- qReadProject(projectFilename)
@

\section{Example workflow with fasta files as genome}

<<fastaProject, eval=FALSE>>=
td <- tempdir()
sampleFile <- system.file(package="QuasR", "extdata", "samples.txt")
annotationFile <- system.file(package="QuasR", "extdata", "annotations.txt")
#genomeName <- file.path(td, "sacCer2")
#url <- "ftp://hgdownload.cse.ucsc.edu/goldenPath/sacCer2/bigZips/chromFa.tar.gz"
#destFile <- file.path(td, basename(url))
#download.file(url, destFile, "curl")
#untar(destFile, exdir=genomeName, verbose=T)
genomeName <- "data/sacCer2"
project <- qProject(sampleFile, genome=genomeName, annotationFile=annotationFile, path=td)
project <- qAlign(project)
@

\section{Detailed function description}
\subsection{preprocessRead()}
\label{sec:preprocessRead}
If the short reads are barcoded, contains adapter or should be filtered then TODO 

\subsection{qProject()}
TODO

\subsection{qAlign()}
TODO

\subsection{qCount()}
TODO

\subsection{qQCReport()}
TODO

\subsection{qExportWig()}
TODO

\subsection{qSaveProject() and qReadProject()}
TODO

\section{Session information}

The output in this vignette was produced under the following conditions:

<<sessionInfo>>=
sessionInfo()
@

\end{document}

